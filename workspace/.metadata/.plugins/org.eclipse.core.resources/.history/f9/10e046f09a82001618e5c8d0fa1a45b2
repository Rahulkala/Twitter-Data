
import java.util.concurrent.LinkedBlockingQueue;

import twitter4j.FilterQuery;
import twitter4j.StallWarning;
import twitter4j.Status;
import twitter4j.StatusDeletionNotice;
import twitter4j.StatusListener;
import twitter4j.TwitterException;
import twitter4j.TwitterStream;
import twitter4j.TwitterStreamFactory;
import twitter4j.conf.ConfigurationBuilder;

/**
 * <p>This is a code example of Twitter4J Streaming API - sample method support.<br>
 * Usage: java twitter4j.examples.PrintSampleStream<br>
 * </p>
 *
 * @author Yusuke Yamamoto - yusuke at mac.com
 */
public final class TweetGet {
    /**
     * Main entry of this application.
     *
     * @param args
     */
	final LinkedBlockingQueue<TweetsData> tweetsQueue;
	final String keywords[];
	public TweetGet(LinkedBlockingQueue<TweetsData> tweetsQueue, String[] keywords)
	{
		this.tweetsQueue = tweetsQueue;
		this.keywords = keywords;
	}
    public void streamTweets()throws TwitterException {
    	//just fill this
    	 ConfigurationBuilder cb = new ConfigurationBuilder();
         cb.setDebugEnabled(true)
           .setOAuthConsumerKey("deGvJNAbPQZtEHO3IPY4woB33")
           .setOAuthConsumerSecret("MOUYRi40ueN6g7Ik5SZPZJ7IBuRPlmXpZ8BOffiyFjudd8Yec4")
           .setOAuthAccessToken("63542770-PYeonIeKKUB52pEHNUmudnSrnl0HLh6nLq0jf2Pnx")
           .setOAuthAccessTokenSecret("i9xTQjHKH5TaccH7LhNJfdxy8j9gwgrobKkRL3cXcUdTI");
        TwitterStream twitterStream = new TwitterStreamFactory(cb.build()).getInstance();
        StatusListener listener = new StatusListener() {
            public void onStatus(Status status) {
            	if(status.getGeoLocation()!=null)
            	{
            		TweetsData td = new TweetsData();
            		for(String keyword:keywords)
            		{
            			if(status.getText().contains(keyword))
            			{
            				td.setKeyword(keyword);
            				td.setLatitude(status.getGeoLocation().getLatitude());
            				td.setLongitude(status.getGeoLocation().getLongitude());
            				td.setCreatedAt(new java.sql.Timestamp(status.getCreatedAt().getTime()));
							try 
							{
								tweetsQueue.put(td);
							} 
							catch (InterruptedException e) 
							{
								e.printStackTrace();
							}
							
							System.out.println(keyword+tweetsQueue.size());
            			}
            		}
            	}
            	else
            	{
            		TweetsData td = new TweetsData();
            		status.getText();
            	}
            }

            public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) {
                //System.out.println("Got a status deletion notice id:" + statusDeletionNotice.getStatusId());
            }

            public void onTrackLimitationNotice(int numberOfLimitedStatuses) {
               // System.out.println("Got track limitation notice:" + numberOfLimitedStatuses);
            }

            public void onScrubGeo(long userId, long upToStatusId) {
                //System.out.println("Got scrub_geo event userId:" + userId + " upToStatusId:" + upToStatusId);
            }

            public void onStallWarning(StallWarning warning) {
                //System.out.println("Got stall warning:" + warning);
            }

            public void onException(Exception ex) {
                ex.printStackTrace();
            }
        };
        FilterQuery fq = new FilterQuery();
        fq.track(keywords);
        twitterStream.addListener(listener);
        twitterStream.filter(fq);
    }
    
    public static void main(String args[]) throws TwitterException
    {
    	LinkedBlockingQueue<TweetsData> dataList = new LinkedBlockingQueue<TweetsData> ();
    	String keywords[] = {"snow", "birthday", "worldcup", "cricket", "iphone"};
    	TweetGet tg = new TweetGet(dataList, keywords);
    	tg.streamTweets();
    }
}